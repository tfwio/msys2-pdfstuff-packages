# Maintainer: tfwroble <@gmail.com>
# http://git.ghostscript.com/?p=mujs.git;a=snapshot;h=9bc5fec0804381d59ef8dc62304ed6892fb7c4ca;sf=tgz
# 9bc5fec0804381d59ef8dc62304ed6892fb7c4ca
# - owner       Artifex Software, Inc.
# - last change Thu, 11 Dec 2014 09:45:04 -0600 (16:45 +0100)
# - URL         git://git.ghostscript.com/mujs.git
  #cd       "$srcdir/build-$MINGW_CHOST"
  #cd "$srcdir/${_realname}-${pkgver}-source" # for patching
  ###o ---------------------------------
  ###o srcdir=$srcdir
  ###o startdir=$startdir
  ###o PKGCONFIG=$PKGCONFIG
  ###o CARCH=$CARCH
  ###o MINGW_CHOST=$MINGW_CHOST
  ###o MINGW_PREFIX=$MINGW_PREFIX
  ###o XCFLAGS=$XCFLAGS
  ###o LDFLAGS=-static
  ###o ---------------------------------
_realname=mujs

pkgver=git
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgrel=0
pkgdesc='MuJS: a Javascript interpreter'
arch=('any')
url='http://mupdf.com'
license=('AGPL')

#kg_sha=aba272ac959329476ce73bc7d69d14ad7779c754
#kg_url="http://git.ghostscript.com/?p=mujs.git;a=snapshot;h=aba272ac959329476ce73bc7d69d14ad7779c754;sf=tgz"
pkg_url="git+https://tfw.io/Mu/mujs"
#kg_nam=mujs-${pkg_sha::7}
pkg_nam=mujs-git

#rl=http://git.ghostscript.com/?p=mujs.git;a=snapshot;h=9bc5fec0804381d59ef8dc62304ed6892fb7c4ca;sf=tgz

source=("${pkg_nam}::$pkg_url")

#ource=("$pkg_nam.tar.gz::$pkg_url" 000-Makefile.patch)
md5sums=('SKIP')
options=(!zipman !strip !docs !libtool staticlibs !emptydirs !zipman !purge !upx !debug)

makedepends=("${MINGW_PACKAGE_PREFIX}-clang")

  # print_msg1    (green)
  # print_msg2    (blue)
  # print_warning (yellow)
  # print_error   (red)
  # echo $(printenv) > vars.sh
  # exit 1


plain() {
  local mesg=$1; shift
  printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

print_warning() {
  local mesg=$1; shift
  printf "${YELLOW}=> WARNING:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

print_msg1() {
  local mesg=$1; shift
  printf "${GREEN}==> ${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

print_msg2() {
  local mesg=$1; shift
  printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

print_error() {
  local mesg=$1; shift
  printf "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

local_paths ()
{
  # . ${startdir}/helper.sh
  print_msg1 "setting local paths"
  print_msg2 "CARCH: $CARCH"
  print_msg2 "CHOST: $CHOST"
  print_msg2 "MINGW_PREFIX: $MINGW_PREFIX"
  print_msg2 "MINGW_CHOST: $MINGW_CHOST"
  
  pushd $MINGW_PREFIX/bin > /dev/null; ifix=`pwd -W`; popd > /dev/null
  pushd $MINGW_PREFIX > /dev/null; WMD=`pwd -W`; popd
  workdir=${startdir}/src/work-${CARCH}
  pkgdir=${startdir}/pkg/${pkgname}
  builddir=${startdir}/src/build-${CARCH}
  pkgdest=${pkgdir}${MINGW_PREFIX}
  prefix=${builddir}

  if [[ "x$1" == "x1" ]]; then
    print_msg2 "builddir   : ${builddir}"
    print_msg2 "ifix       : ${ifix}"
    print_msg2 "pkgdest    : ${pkgdest}"
    print_msg2 "pkgdir     : ${pkgdir}"
    print_msg2 "prefix     : ${prefix}"
    print_msg2 "srcdir     : ${srcdir}"
    print_msg2 "startdir   : ${startdir}"
    print_msg2 "workdir    : ${workdir}"
    print_msg2 "WMD        : ${WMD}"
  fi
  pathsloaded=true
}

prepare_dirs ()
{
  if [[ -d ${builddir} ]]; then
    print_msg1 'remove build directory' #green
    rm -drf ${builddir}
  else
    print_warning 'no build directory to remove' # yellow
  fi
  if [[ -d ${workdir} ]]; then
    print_msg1 'remove work directory' #green
    rm -drf ${workdir}
  else
    print_warning 'no work directory to remove' # yellow
  fi
  if [[ -d ${pkgdest} ]]; then
    print_msg1 'remove pkgdest directory' #green
    rm -drf ${pkgdest}
  else
    print_warning 'no work directory to remove' # yellow
  fi
}

prepare ()
{
  local_paths 1
  prepare_dirs

  print_msg2 "move source to \"${workdir}\" directory"
  mv ${pkg_nam} ${workdir} > /dev/null
  
  print_msg2 'create build directory'
  mkdir -p ${builddir}

  #print_msg2 'enter work directory'
  #pushd ${workdir} > /dev/null
  #patch -p1 -i ${srcdir}/000-Makefile.patch
  #popd
}

build()
{
  if [[ ! "x${pathsloaded}" == "true" ]]; then local_paths 1; fi # echo $(printenv) > vars.sh
  pushd ${workdir} > /dev/null
    export CC=$ifix/gcc
    export LD=$ifix/ld
    export AR=$ifix/ar
    export CXX=$ifix/g++
    export LIBTOOL=$ifix/libtool
    export CC LD AR CXX LIBTOOL XCFLAGS
    prefix=${prefix} \
    make install build=release
  popd > /dev/null


  # mingw32-make || mingw32-make || mingw32-make
}

package() {
  if [[ ! "x${pathsloaded}" == "true" ]]; then local_paths 1; fi
  if [[ -d ${pkgdest} ]]; then rm -drf ${pkgdest}; fi
  mkdir -p ${pkgdest}
  print_msg1 "copying files..."
  cp -r ${builddir}/* ${pkgdest}
}

